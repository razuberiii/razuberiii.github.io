<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Seata分布式事务学习笔记</title>
      <link href="/2022/05/27/seata-fen-bu-shi-shi-wu-xue-xi-bi-ji/"/>
      <url>/2022/05/27/seata-fen-bu-shi-shi-wu-xue-xi-bi-ji/</url>
      
        <content type="html"><![CDATA[<blockquote><p>通过Spring框架下的@Transactional注解可以保证单一数据源增删改查的一致性。</p><p>但在分布式事务中，每个微服务都可能对应着一个独立的数据源，这个时候@Transactional注解就失效了。所以为了解决在调用多个系统服务时数据的一致性，需要使用分布式事务来解决这个问题。</p></blockquote><h4 id="Seata介绍"><a href="#Seata介绍" class="headerlink" title="Seata介绍"></a>Seata介绍</h4><p>Seata是一个由阿里开源的解决开发中的分布式事务问题的一套分布式事务解决方案。Seata的设计目标是<strong>对业务无侵入</strong>，从对业务无侵入的2PC方案入手，在传统的2PC的基础上演化而来。Seata将一个分布式事务理解成一个包含了若干分支事务的全局事务，在全局事务的协调下保证各个分支事务的数据一致性，要么一起提交，要么一起回滚。</p><h4 id="Seata组件"><a href="#Seata组件" class="headerlink" title="Seata组件"></a>Seata组件</h4><p>Seata主要有三个重要组件组成</p><ul><li>TC: Transaction Coordinator 事务协调器，管理全局的分支事务的状态，用于全局事务的提交和回滚</li><li>TM: Transaction Manager 事务管理器，用于开启、提交和回滚全局事务</li><li>RM: Resource Manager  资源管理器，用于分支事务的资源管理，向TC注册分支事务，上报分支事务的状态，上报分支事务的状态，接受TC的命令来提交和回滚事务</li></ul><h4 id="Seata工作流程"><a href="#Seata工作流程" class="headerlink" title="Seata工作流程"></a>Seata工作流程</h4><p>Seata的工作流程</p><ol><li>TM向TC申请开启一个全局事务，全局事务创建成功并生成全局唯一的XID</li><li>XID在微服务调用链路的上下文中传播</li><li>RM向TC注册分支事务，将其纳入XID对应全局事务的管辖</li><li>TM向TC发起针对XID的全局提交或回滚决议</li><li>TC调度XID下管辖的全部分支事务完成提交或回滚请求</li></ol><h4 id="Seata整体机制"><a href="#Seata整体机制" class="headerlink" title="Seata整体机制"></a>Seata整体机制</h4><p>2PC协议的演变：</p><ul><li><p>一阶段：业务数据和回滚日志记录在同一个本地事务中提交，释放本地锁和链接资源</p></li><li><p>二阶段：</p><ol><li><p>提交异步化</p></li><li><p>回滚通过一阶段的回滚日志进行反向补偿</p></li></ol></li></ul><h5 id="写隔离"><a href="#写隔离" class="headerlink" title="写隔离"></a>写隔离</h5><p>一阶段本地事务提交前，需要确保先拿到全局锁。拿不到全局锁就不能提交本地事务。拿全局锁的尝试被限制在一定范围内，超出范围将放弃，并回滚本地事务，释放本地锁。写隔离的目的是为了防止多个分布式事务脏写的问题。例如一个用户下单购买商品，订单微服务调用库存微服务进行完了增减库存的操作，正在进行创建订单的操作。而此时另一个用户也下单了相同的商品，库存微服务中此时因为已经调用结束了，是没有本地锁的，如果没有写隔离，此时第一个用户的操作遇到异常回滚，但因为此时库存的数据已经被第二个用户更改，可能会导致全局事务回滚失败</p><h5 id="读隔离"><a href="#读隔离" class="headerlink" title="读隔离"></a>读隔离</h5><p>在数据库本地事务隔离级别 读已提交（Read Committed） 或以上的基础上，Seata（AT 模式）的默认全局隔离级别是 读未提交（Read Uncommitted）如果应用在特定场景下，必需要求全局的 读已提交 ，可以通过 SELECT FOR UPDATE 语句的代理。SELECT FOR UPDATE 语句的执行会申请 全局锁 ，如果 全局锁 被其他事务持有，则释放本地锁（回滚 SELECT FOR UPDATE 语句的本地执行）并重试。这个过程中，查询是被 block 住的，直到全局锁拿到，即读取的相关数据是已提交的，才返回。</p><h5 id="Seata实现2PC与传统2PC的差别"><a href="#Seata实现2PC与传统2PC的差别" class="headerlink" title="Seata实现2PC与传统2PC的差别"></a>Seata实现2PC与传统2PC的差别</h5><ol><li>架构层次方面，传统2PC方案的 RM 实际上是在数据库层，RM本质上就是数据库自身，通过XA协议实现，而 Seata的RM是以jar包的形式作为中间件层部署在应用程序这一侧的。</li><li>两阶段提交方面，传统2PC无论第二阶段的决议是commit还是rollback，事务性资源的锁都要保持到Phase2完成才释放。而Seata的做法是在Phase1 就将本地事务提交，这样就可以省去Phase2持锁的时间，整体提高效率</li></ol><h4 id="Seata安装和配置"><a href="#Seata安装和配置" class="headerlink" title="Seata安装和配置"></a>Seata安装和配置</h4><ul><li>修改file.conf</li></ul><pre class="line-numbers language-none"><code class="language-none">## transaction log storestore &#123;  ## store mode: file、db  mode &#x3D; &quot;db&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>将mode改为db</p><pre class="line-numbers language-none"><code class="language-none">## the implement of javax.sql.DataSource, such as DruidDataSource(druid)&#x2F;BasicDataSource(dbcp) etc. datasource &#x3D; &quot;dbcp&quot; ## mysql&#x2F;oracle&#x2F;h2&#x2F;oceanbase etc. db-type &#x3D; &quot;mysql&quot; driverClassName &#x3D; &quot;com.mysql.cj.jdbc.Driver&quot; url &#x3D; &quot;jdbc:mysql:&#x2F;&#x2F;127.0.0.1:3306&#x2F;seata?useUnicode&#x3D;true&amp;characterEncoding&#x3D;utf8&amp;useSSL&#x3D;false&amp;&amp;serverTimezone&#x3D;UTC&quot; user &#x3D; &quot;root&quot; password &#x3D; &quot;123456&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>更改数据库配置信息</p><pre class="line-numbers language-none"><code class="language-none">service &#123;  #vgroup-&gt;rgroup  vgroup_mapping.seata_tx_group &#x3D; &quot;default&quot;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>更改事务分组</p><ul><li>修改registry.conf</li></ul><pre class="line-numbers language-none"><code class="language-none">registry &#123;  # file 、nacos 、eureka、redis、zk、consul、etcd3、sofa  type &#x3D; &quot;nacos&quot;  nacos &#123;    serverAddr &#x3D; &quot;localhost:8848&quot;    namespace &#x3D; &quot;&quot;    cluster &#x3D; &quot;default&quot;  &#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这里使用Nacos，填写地址和命名空间，不填为public</p><ul><li>配置数据库</li></ul><p>seata中conf文件夹中，<strong>db_store.sql</strong>在seata数据库中执行，<strong>db_undo_log.sql</strong>在业务数据库中执行。</p><h4 id="Seata的使用"><a href="#Seata的使用" class="headerlink" title="Seata的使用"></a>Seata的使用</h4><p>有订单微服务和库存微服务，订单微服务前端接受到数据后，通过Feign调用库存微服务减少库存，之后在数据库中创建订单。</p><p>通过使用Seata来保证创建订单和减少库存的原子性。</p><ol><li>pom文件中添加seata起步依赖</li></ol><pre class="line-numbers language-markup" data-language="markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>com.alibaba.cloud<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>spring-cloud-starter-alibaba-seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusions</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>exclusion</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>seata-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>                  <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>              <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusion</span><span class="token punctuation">></span></span>          <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>exclusions</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>dependency</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>groupId</span><span class="token punctuation">></span></span>io.seata<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>groupId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>artifactId</span><span class="token punctuation">></span></span>seata-all<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>artifactId</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>version</span><span class="token punctuation">></span></span>0.9.0<span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>version</span><span class="token punctuation">></span></span>      <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>dependency</span><span class="token punctuation">></span></span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>可以将起步依赖中的seata排除，安装与本地安装seata版本相同的seata，避免出现版本问题</p><ol start="2"><li>在application.properties中添加seata相关配置</li></ol><pre class="line-numbers language-properties" data-language="properties"><code class="language-properties"><span class="token comment"># 关闭Feign降级</span><span class="token key attr-name">feign.hystrix.enabled</span><span class="token punctuation">=</span><span class="token value attr-value">false</span><span class="token key attr-name">logging.level.io.seata</span><span class="token punctuation">=</span><span class="token value attr-value">info</span><span class="token comment"># 分组要与registry.conf相同</span><span class="token key attr-name">spring.cloud.alibaba.seata.tx-service-group</span><span class="token punctuation">=</span><span class="token value attr-value">tx_group</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>将conf文件夹中配置好的<strong>file.conf</strong>和<strong>registry.conf</strong>复制到项目的resources目录下</li></ol><p><img src="https://blog-1312179285.cos.ap-nanjing.myqcloud.com/%E5%BE%AE%E6%9C%8D%E5%8A%A1/%E5%BE%AE%E4%BF%A1%E6%88%AA%E5%9B%BE_20220527180604.png" alt="将配置文件复制到resources目录下"></p><ol start="4"><li>新增一个Configuration</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token comment">/** * 使用Seata对数据源进行代理 */</span><span class="token annotation punctuation">@Configuration</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">DataSourceProxyConfig</span> <span class="token punctuation">&#123;</span>    <span class="token annotation punctuation">@Value</span><span class="token punctuation">(</span><span class="token string">"classpath:mapper/*.xml"</span><span class="token punctuation">)</span>    <span class="token keyword">private</span> <span class="token class-name">String</span> mapperLocations<span class="token punctuation">;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token annotation punctuation">@ConfigurationProperties</span><span class="token punctuation">(</span>prefix <span class="token operator">=</span> <span class="token string">"spring.datasource"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token class-name">DataSource</span> <span class="token function">druidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DruidDataSource</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">DataSourceProxy</span> <span class="token function">dataSourceProxy</span><span class="token punctuation">(</span><span class="token class-name">DataSource</span> dataSource<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>        <span class="token keyword">return</span> <span class="token keyword">new</span> <span class="token class-name">DataSourceProxy</span><span class="token punctuation">(</span>dataSource<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span>    <span class="token annotation punctuation">@Bean</span>    <span class="token keyword">public</span> <span class="token class-name">SqlSessionFactory</span> <span class="token function">sqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token class-name">DataSourceProxy</span> dataSourceProxy<span class="token punctuation">)</span> <span class="token keyword">throws</span> <span class="token class-name">Exception</span> <span class="token punctuation">&#123;</span>        <span class="token class-name">SqlSessionFactoryBean</span> sqlSessionFactoryBean <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SqlSessionFactoryBean</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSessionFactoryBean<span class="token punctuation">.</span><span class="token function">setDataSource</span><span class="token punctuation">(</span>dataSourceProxy<span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSessionFactoryBean<span class="token punctuation">.</span><span class="token function">setMapperLocations</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">PathMatchingResourcePatternResolver</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getResources</span><span class="token punctuation">(</span>mapperLocations<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sqlSessionFactoryBean<span class="token punctuation">.</span><span class="token function">setTransactionFactory</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">SpringManagedTransactionFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> sqlSessionFactoryBean<span class="token punctuation">.</span><span class="token function">getObject</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">&#125;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>业务方法中加入@GlobalTransactional注解即可</li></ol><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@GlobalTransactional</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"create-order"</span><span class="token punctuation">,</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h5 id="测试"><a href="#测试" class="headerlink" title="测试"></a>测试</h5><pre class="line-numbers language-java" data-language="java"><code class="language-java"><span class="token annotation punctuation">@Override</span>   <span class="token annotation punctuation">@GlobalTransactional</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"create-order"</span><span class="token punctuation">,</span>rollbackFor <span class="token operator">=</span> <span class="token class-name">Exception</span><span class="token punctuation">.</span><span class="token keyword">class</span><span class="token punctuation">)</span>   <span class="token keyword">public</span> <span class="token class-name">String</span> <span class="token function">createOrder</span><span class="token punctuation">(</span><span class="token class-name">Order</span> order<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>       <span class="token class-name">Integer</span> goodId <span class="token operator">=</span> order<span class="token punctuation">.</span><span class="token function">getGoodId</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token class-name">String</span> username <span class="token operator">=</span> order<span class="token punctuation">.</span><span class="token function">getUsername</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//数据验证</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>goodId <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"请输入商品id"</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>username <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"请输入用户名"</span><span class="token punctuation">;</span>       <span class="token class-name">Integer</span> count <span class="token operator">=</span> gm<span class="token punctuation">.</span><span class="token function">queryGoodCount</span><span class="token punctuation">(</span>goodId<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span>count <span class="token operator">==</span> <span class="token keyword">null</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"商品不存在"</span><span class="token punctuation">;</span>       <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token operator">!</span><span class="token punctuation">(</span>count <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">return</span> <span class="token string">"秒杀失败，商品已被抢完"</span><span class="token punctuation">;</span>       <span class="token comment">//通过Feign调用库存微服务更新库存</span>       ps<span class="token punctuation">.</span><span class="token function">updateStock</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token comment">//模拟异常</span>       <span class="token keyword">int</span> i<span class="token operator">=</span><span class="token number">1</span><span class="token operator">/</span><span class="token number">0</span><span class="token punctuation">;</span>       <span class="token comment">//创建订单</span>       om<span class="token punctuation">.</span><span class="token function">insertOrderInfo</span><span class="token punctuation">(</span>order<span class="token punctuation">)</span><span class="token punctuation">;</span>       <span class="token keyword">return</span> <span class="token string">"秒杀成功"</span><span class="token punctuation">;</span>   <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>经过测试，如果使用@Transactional，如果在更新库存成功后发生异常，库存不会回滚，数据会不一致。</p><p>使用@GlobalTransactional注解，则可以成功回滚。</p>]]></content>
      
      
      <categories>
          
          <category> 微服务笔记 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Seata </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
